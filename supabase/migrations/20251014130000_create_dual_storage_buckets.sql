-- Dual-Bucket Storage System for Watermark Enforcement
-- Creates separate buckets for watermarked (public) and clean (premium) preview images

-- ========================================
-- 1. Create Public Bucket (Watermarked)
-- ========================================

-- Insert public bucket for watermarked images
INSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
VALUES (
  'preview-cache-public',
  'preview-cache-public',
  true,
  52428800, -- 50MB limit
  ARRAY['image/jpeg', 'image/jpg', 'image/png', 'image/webp']
)
ON CONFLICT (id) DO NOTHING;

-- Public read access for watermarked previews
CREATE POLICY IF NOT EXISTS "Public watermarked previews are publicly accessible"
ON storage.objects FOR SELECT
TO public
USING (bucket_id = 'preview-cache-public');

-- Service role can insert watermarked previews
CREATE POLICY IF NOT EXISTS "Service role can upload watermarked previews"
ON storage.objects FOR INSERT
TO service_role
WITH CHECK (bucket_id = 'preview-cache-public');

-- Service role can update/delete watermarked previews
CREATE POLICY IF NOT EXISTS "Service role can update watermarked previews"
ON storage.objects FOR UPDATE
TO service_role
USING (bucket_id = 'preview-cache-public');

CREATE POLICY IF NOT EXISTS "Service role can delete watermarked previews"
ON storage.objects FOR DELETE
TO service_role
USING (bucket_id = 'preview-cache-public');

-- ========================================
-- 2. Create Premium Bucket (Clean)
-- ========================================

-- Insert private bucket for clean images
INSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
VALUES (
  'preview-cache-premium',
  'preview-cache-premium',
  false, -- PRIVATE - no public access
  52428800, -- 50MB limit
  ARRAY['image/jpeg', 'image/jpg', 'image/png', 'image/webp']
)
ON CONFLICT (id) DO NOTHING;

-- Service role can insert clean previews
CREATE POLICY IF NOT EXISTS "Service role can upload premium previews"
ON storage.objects FOR INSERT
TO service_role
WITH CHECK (bucket_id = 'preview-cache-premium');

-- Service role can update/delete clean previews
CREATE POLICY IF NOT EXISTS "Service role can update premium previews"
ON storage.objects FOR UPDATE
TO service_role
USING (bucket_id = 'preview-cache-premium');

CREATE POLICY IF NOT EXISTS "Service role can delete premium previews"
ON storage.objects FOR DELETE
TO service_role
USING (bucket_id = 'preview-cache-premium');

-- Authenticated users can read via signed URLs (generated by edge function)
CREATE POLICY IF NOT EXISTS "Authenticated users can read premium previews via signed URLs"
ON storage.objects FOR SELECT
TO authenticated
USING (bucket_id = 'preview-cache-premium');

-- ========================================
-- 3. Add Indexes for Performance
-- ========================================

-- Index for faster lookups by bucket
CREATE INDEX IF NOT EXISTS idx_storage_objects_bucket_name
ON storage.objects (bucket_id, name);

-- ========================================
-- 4. Migration Notes
-- ========================================

-- After running this migration:
-- 1. Deploy updated edge function: generate-style-preview
-- 2. Deploy new edge function: get-premium-preview
-- 3. Test with anonymous, free, and premium user tiers
-- 4. Monitor Supabase storage dashboard for bucket usage

-- Rollback (if needed):
-- DELETE FROM storage.buckets WHERE id IN ('preview-cache-public', 'preview-cache-premium');
