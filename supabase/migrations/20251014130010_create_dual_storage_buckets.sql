-- Dual-Bucket Storage System for Watermark Enforcement
-- Creates separate buckets for watermarked (public) and clean (premium) preview images

-- ========================================
-- 1. Create Public Bucket (Watermarked)
-- ========================================

-- Insert public bucket for watermarked images
INSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
VALUES (
  'preview-cache-public',
  'preview-cache-public',
  true,
  52428800, -- 50MB limit
  ARRAY['image/jpeg', 'image/jpg', 'image/png', 'image/webp']
)
ON CONFLICT (id) DO NOTHING;

-- Public read access for watermarked previews
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1
    FROM pg_policies
    WHERE schemaname = 'storage'
      AND tablename = 'objects'
      AND policyname = 'Public watermarked previews are publicly accessible'
  ) THEN
    CREATE POLICY "Public watermarked previews are publicly accessible"
    ON storage.objects FOR SELECT
    TO public
    USING (bucket_id = 'preview-cache-public');
  END IF;
END;
$$;

-- Service role can insert watermarked previews
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1
    FROM pg_policies
    WHERE schemaname = 'storage'
      AND tablename = 'objects'
      AND policyname = 'Service role can upload watermarked previews'
  ) THEN
    CREATE POLICY "Service role can upload watermarked previews"
    ON storage.objects FOR INSERT
    TO service_role
    WITH CHECK (bucket_id = 'preview-cache-public');
  END IF;
END;
$$;

-- Service role can update/delete watermarked previews
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies
    WHERE schemaname = 'storage'
      AND tablename = 'objects'
      AND policyname = 'Service role can update watermarked previews'
  ) THEN
    CREATE POLICY "Service role can update watermarked previews"
    ON storage.objects FOR UPDATE
    TO service_role
    USING (bucket_id = 'preview-cache-public');
  END IF;
END;
$$;

DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies
    WHERE schemaname = 'storage'
      AND tablename = 'objects'
      AND policyname = 'Service role can delete watermarked previews'
  ) THEN
    CREATE POLICY "Service role can delete watermarked previews"
    ON storage.objects FOR DELETE
    TO service_role
    USING (bucket_id = 'preview-cache-public');
  END IF;
END;
$$;

-- ========================================
-- 2. Create Premium Bucket (Clean)
-- ========================================

-- Insert private bucket for clean images
INSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
VALUES (
  'preview-cache-premium',
  'preview-cache-premium',
  false, -- PRIVATE - no public access
  52428800, -- 50MB limit
  ARRAY['image/jpeg', 'image/jpg', 'image/png', 'image/webp']
)
ON CONFLICT (id) DO NOTHING;

-- Service role can insert clean previews
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1
    FROM pg_policies
    WHERE schemaname = 'storage'
      AND tablename = 'objects'
      AND policyname = 'Service role can upload premium previews'
  ) THEN
    CREATE POLICY "Service role can upload premium previews"
    ON storage.objects FOR INSERT
    TO service_role
    WITH CHECK (bucket_id = 'preview-cache-premium');
  END IF;
END;
$$;

-- Service role can update/delete clean previews
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1
    FROM pg_policies
    WHERE schemaname = 'storage'
      AND tablename = 'objects'
      AND policyname = 'Service role can update premium previews'
  ) THEN
    CREATE POLICY "Service role can update premium previews"
    ON storage.objects FOR UPDATE
    TO service_role
    USING (bucket_id = 'preview-cache-premium');
  END IF;
END;
$$;

DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1
    FROM pg_policies
    WHERE schemaname = 'storage'
      AND tablename = 'objects'
      AND policyname = 'Service role can delete premium previews'
  ) THEN
    CREATE POLICY "Service role can delete premium previews"
    ON storage.objects FOR DELETE
    TO service_role
    USING (bucket_id = 'preview-cache-premium');
  END IF;
END;
$$;

-- Authenticated users can read via signed URLs (generated by edge function)
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1
    FROM pg_policies
    WHERE schemaname = 'storage'
      AND tablename = 'objects'
      AND policyname = 'Authenticated users can read premium previews via signed URLs'
  ) THEN
    CREATE POLICY "Authenticated users can read premium previews via signed URLs"
    ON storage.objects FOR SELECT
    TO authenticated
    USING (bucket_id = 'preview-cache-premium');
  END IF;
END;
$$;

-- ========================================
-- 3. Add Indexes for Performance
-- ========================================

-- ========================================
-- 4. Migration Notes
-- ========================================

-- After running this migration:
-- 1. Deploy updated edge function: generate-style-preview
-- 2. Deploy new edge function: get-premium-preview
-- 3. Test with anonymous, free, and premium user tiers
-- 4. Monitor Supabase storage dashboard for bucket usage

-- Rollback (if needed):
-- DELETE FROM storage.buckets WHERE id IN ('preview-cache-public', 'preview-cache-premium');
